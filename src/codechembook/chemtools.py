################################################################################# ChemSymbols - a function containing the unicode strings for special characters# that are common in chemistry################################################################################def chemSymbols(key, printall=False):    """    Function interface to a database of common chemistry symbols.        Required Args:        key (string): which symbol to return (see below for )            Optional Args:        printall (boolean): test function to print all key : symbol pairs            Returns:        (string): the symbol(s) requested by key        Available keys are:    'Angstrom', 'cm-1', 'degree', 'Delta', 'mu', 'nu',     'rxn_arrow_right', 'rxn_arrow_left', 'equil_arrow', 'resonance_arrow'    '_0', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9',     '_+', '_-', '_(', '_)', '_n', '_x', '_i',    '^0', '^1', '^2', '^3', '^4', '^5', '^6', '^7', '^8', '^9',     '^+', '^-', '^(', '^)', '^n', '^x'    """        # Define our dictionary    symbol_dictionary = {        # Chemistry symbols        'Angstrom': '\u212B',        'cm-1': 'cm\u207B\u00B9',        'degree': '\u00B0',        'sbond': '\uFF0D', # single bond        'dbond': '\uFF1D', # double bond        'tbond': '\u200A\u2261\u200A', # triple bond        'rxn_arrow_right': '\u2192',        'rxn_arrow_left': '\u2190',        'equil_arrow': '\u21CC',        'resonance_arrow': '\u2194',        'end_complex': '\u231D', # corner bracket to denote charge of complexes        'radical': '\u02D9', # radical symbol        'dagger': '\u2020', # dagger        'ddagger': '\u2021', # double dagger        # Math symbols        'pm': '\u00B1', # plus/minus        'cdot': '\u22C5', # dot product operator        'mdot': '\u00B7', # middle dot        'identicalto': '\u2261', #         'prime': '\u2032', # prime        'dprime': '\u2033', # double prime        'tprime': '\u2034', # triple prime        'qprime': '\u2057', # quadruple prime        'times': '\u00D9', # times        'divide': '\u00F7', # divide        'infinity': '\u221E', # infinity        'propto': '\u221D', # proportional        'approx': '\u2245', # approximately equal        'ge': '\u2265', # greater than or equal to        'le': '\u2264', # less than or equal to        'gt': '\u003E', # greater than        'lt': '\u003C', # less than        'perpto': '\u27C2', # perpendicular to        # Subscripts and superscripts        '_0': '\u2080', # subscript 0        '_1': '\u2081', # subscript 1        '_2': '\u2082', # subscript 2        '_3': '\u2083', # subscript 3        '_4': '\u2084', # subscript 4        '_5': '\u2085', # subscript 5        '_6': '\u2086', # subscript 6        '_7': '\u2087', # subscript 7        '_8': '\u2088', # subscript 8        '_9': '\u2089', # subscript 9        '_+': '\u208A', # subscript +        '_-': '\u208B', # subscript -        '_(': '\u208D', # subscript (        '_)': '\u208E', # subscript )        '_=': '\u208C', # subscript =        '_A': '\u1d2c', '_B': '\u1d2e', '_D': '\u1d30', '_E': '\u1d31', '_G': '\u1d33',        '_H': '\u1d34', '_I': '\u1d35', '_J': '\u1d36', '_K': '\u1d37', '_L': '\u1d38',        '_M': '\u1d39', '_N': '\u1d3a', '_O': '\u1d3c', '_P': '\u1d3e', '_R': '\u1d3f',        '_T': '\u1d40', '_U': '\u1d41', '_V': '\u1d42', # subscript upper case letters        '_a': '\u2090', '_e': '\u2091', '_h': '\u2095', '_i': '\u1d62', '_j': '\u2c7c',        '_k': '\u2096', '_l': '\u2097', '_m': '\u2098', '_n': '\u2099', '_o': '\u2092',        '_p': '\u209a', '_r': '\u1d63', '_s': '\u209b', '_t': '\u209c', '_u': '\u1d64',        '_v': '\u1d65', '_x': '\u2093', # subscript lower case letters        '^0': '\u2070', # superscript 0        '^1': '\u00B9', # superscript 1        '^2': '\u00B2', # superscript 2        '^3': '\u00B3', # superscript 3        '^4': '\u2074', # superscript 4        '^5': '\u2075', # superscript 5        '^6': '\u2076', # superscript 6        '^7': '\u2077', # superscript 7        '^8': '\u2078', # superscript 8        '^9': '\u2079', # superscript 9        '^+': '\u207A', # superscript +        '^-': '\u207B', # superscript –        '^(': '\u207D', # superscript (        '^)': '\u207E', # superscript )        '^=': '\u207C', # superscript =        '^A': '\u1d2c', '^B': '\u1d2e', '^C': '\u1d9c', '^D': '\u1d30', '^E': '\u1d31',        '^F': '\u1d32', '^G': '\u1d33', '^H': '\u1d34', '^I': '\u1d35', '^J': '\u1d36',        '^K': '\u1d37', '^L': '\u1d38', '^M': '\u1d39', '^N': '\u1d3a', '^O': '\u1d3c',        '^P': '\u1d3e', '^Q': '\u1d3f', '^R': '\u1d40', '^S': '\u1d41', '^T': '\u1d42',        '^U': '\u1d43', '^V': '\u1d47', '^W': '\u1d48', '^X': '\u1d49', '^Y': '\u1d4a',        '^Z': '\u1d4b', # subscript capital letters        '^a': '\u1d43', '^b': '\u1d47', '^c': '\u1d9c', '^d': '\u1d48', '^e': '\u1d49',        '^f': '\u1da0', '^g': '\u1d4d', '^h': '\u02b0', '^i': '\u2071', '^j': '\u02b2',        '^k': '\u1d4f', '^l': '\u02e1', '^m': '\u1d50', '^n': '\u207f', '^o': '\u1d52',        '^p': '\u1d56', '^q': '\u1d4a', '^r': '\u02b3', '^s': '\u02e2', '^t': '\u1d57',        '^u': '\u1d58', '^v': '\u1d5b', '^w': '\u02b7', '^x': '\u02e3', '^y': '\u02b8',        '_z': '\u1dbb', # subscript lower case letters        # Greek        'Alpha': '\u0391', 'Beta': '\u0392', 'Gamma': '\u0393', 'Delta': '\u0394', 'Epsilon': '\u0395',        'Zeta': '\u0396', 'Eta': '\u0397', 'Theta': '\u0398', 'Iota': '\u0399', 'Kappa': '\u039a',        'Lambda': '\u039b', 'Mu': '\u039c', 'Nu': '\u039d', 'Xi': '\u039e', 'Omicron': '\u039f',        'Pi': '\u03a0', 'Rho': '\u03a1', 'Sigma': '\u03a3', 'Tau': '\u03a4', 'Upsilon': '\u03a5',        'Phi': '\u03a6', 'Chi': '\u03a7', 'Psi': '\u03a8', 'Omega': '\u03a9', # capital greek letters        'alpha': '\u03b1', 'beta': '\u03b2', 'gamma': '\u03b3', 'delta': '\u03b4', 'epsilon': '\u03b5',        'zeta': '\u03b6', 'eta': '\u03b7', 'theta': '\u03b8', 'iota': '\u03b9', 'kappa': '\u03ba',        'lambda': '\u03bb', 'mu': '\u03bc', 'nu': '\u03bd', 'xi': '\u03be', 'omicron': '\u03bf',        'pi': '\u03c0', 'rho': '\u03c1', 'sigma': '\u03c3', 'tau': '\u03c4', 'upsilon': '\u03c5',        'phi': '\u03c6', 'chi': '\u03c7', 'psi': '\u03c8', 'omega': '\u03c9', # lower case greek letters                # Script letters        # 'scriptA': '\u1d49c', 'scriptB': '\u212c', 'scriptC': '\u1d49e', 'scriptD': '\u1d49f', 'scriptE': '\u2130',        # 'scriptF': '\u2131', 'scriptG': '\u1d4a2', 'scriptH': '\u210b', 'scriptI': '\u2110', 'scriptJ': '\u1d4a5',        # 'scriptK': '\u1d4a6', 'scriptL': '\u2112', 'scriptM': '\u2133', 'scriptN': '\u1d4a9', 'scriptO': '\u1d4aa',        # 'scriptP': '\u1d4ab', 'scriptQ': '\u1d4ac', 'scriptR': '\u211b', 'scriptS': '\u1d4ae', 'scriptT': '\u1d4af',        # 'scriptU': '\u1d4b0', 'scriptV': '\u1d4b1', 'scriptW': '\u1d4b2', 'scriptX': '\u1d4b3', 'scriptY': '\u1d4b4',        # 'scriptZ': '\u1d4b5', # capital        # 'scripta': '\u1d4b6', 'scriptb': '\u1d4b7', 'scriptc': '\u1d4b8', 'scriptd': '\u1d4b9', 'scripte': '\u212f',        # 'scriptf': '\u1d4bb', 'scriptg': '\u210a', 'scripth': '\u1d4bd', 'scripti': '\u1d4f2', 'scriptj': '\u1d4bf',        # 'scriptk': '\u1d4c0', 'scriptl': '\u1d4c1', 'scriptm': '\u1d4c2', 'scriptn': '\u1d4c3', 'scripto': '\u2134',        # 'scriptp': '\u1d4c5', 'scriptq': '\u1d4c6', 'scriptr': '\u1d4c7', 'scripts': '\u1d4c8', 'scriptt': '\u1d4c9',        # 'scriptu': '\u1d4ca', 'scriptv': '\u1d4cb', 'scriptw': '\u1d4cc', 'scriptx': '\u1d4cd', 'scripty': '\u1d4ce',        # 'scriptz': '\u1d4cf', # lower case                # Other symbols        '---': '\u2014', # em dash        '--': '\u2013', # en dash        'fdash': '\u2012', # figure dash        'hyphen': '\u002D', # hyphen        'copyright': '\u00A9', # copyright symbol        }        # Since the dictionary is hidden from the user, give a way to see the keys    if printall:        for test_key in symbol_dictionary.keys():            print(test_key + ' : ' + symbol_dictionary[test_key])    # Output the result if the user has chosen a proper key    if key in symbol_dictionary.keys():        return symbol_dictionary[key]    else:        if printall == False:            raise NameError(key + ' is not a known symbol.')def _enclose(text, html_center):    if type(text) == str and type(html_center) == str:        return '<' + html_center + '>' + text + '</' + html_center + '>'    else:        raise NameError('Please provide a string argument')def textsub(text):    """    Return a piece of text that has added HTML subscript tags.        Required Args:        text (string): text that should be subscripted            Returns:        (string): subscripted text with HTML tags    """    return _enclose(text, 'sub')def textsup(text):    """    Return a piece of text that has added HTML superscript tags.        Required Args:        text (string): text that should be superscripted            Returns:        (string): superscripted text with HTML tags    """    return _enclose(text, 'sup')def textit(text):    """    Return a piece of text that has added HTML italics tags.        Required Args:        text (string): text that should be italicized            Returns:        (string): italicized text with HTML tags    """    return _enclose(text, 'i')def textbf(text):    """    Return a piece of text that has added HTML bold face tags.        Required Args:        text (string): text that should be bold faced            Returns:        (string): bold face text with HTML tags    """    return _enclose(text, 'b')'''make a data lass for chemsymbolscs.mathcs.chemcs.greekcs.typecs.supcs.subcs.script'''from dataclasses import dataclass, field@dataclassclass chemSymbols:    # Chemistry symbols    Angstrom: str = '\u212B'    wavenumber: str = 'cm\u207B\u00B9'    degree: str = '\u00B0'    sbond: str = '\uFF0D'  # single bond    dbond: str = '\uFF1D'  # double bond    tbond: str = '\u200A\u2261\u200A'  # triple bond    rxn_arrow_right: str = '\u2192'    rxn_arrow_left: str = '\u2190'    equil_arrow: str = '\u21CC'    resonance_arrow: str = '\u2194'    end_complex: str = '\u231D'  # corner bracket to denote charge of complexes    radical: str = '\u02D9'  # radical symbol    dagger: str = '\u2020'  # dagger    ddagger: str = '\u2021'  # double daggerchem = chemSymbols()@dataclassclass mathSymbols:    # Mathematical symbols    plus_minus: str = '\u00B1'  # ± plus/minus    cdot: str = '\u22C5'  # ⋅ dot product operator    mdot: str = '\u00B7'  # · middle dot    identical_to: str = '\u2261'  # ≡ identical to    prime: str = '\u2032'  # ′ prime    double_prime: str = '\u2033'  # ″ double prime    triple_prime: str = '\u2034'  # ‴ triple prime    quadruple_prime: str = '\u2057'  # ⁗ quadruple prime    times: str = '\u00D7'  # × multiplication (times)    divide: str = '\u00F7'  # ÷ division    infinity: str = '\u221E'  # ∞ infinity    proportional_to: str = '\u221D'  # ∝ proportional to    approximately_equal: str = '\u2245'  # ≅ approximately equal to    greater_equal: str = '\u2265'  # ≥ greater than or equal to    less_equal: str = '\u2264'  # ≤ less than or equal to    greater_than: str = '\u003E'  # > greater than    less_than: str = '\u003C'  # < less than    perpendicular_to: str = '\u27C2'  # ⟂ perpendicular to@dataclassclass supSymbols:    # Superscript symbols    sup_0: str = '\u2070'  # ⁰ superscript 0    sup_1: str = '\u00B9'  # ¹ superscript 1    sup_2: str = '\u00B2'  # ² superscript 2    sup_3: str = '\u00B3'  # ³ superscript 3    sup_4: str = '\u2074'  # ⁴ superscript 4    sup_5: str = '\u2075'  # ⁵ superscript 5    sup_6: str = '\u2076'  # ⁶ superscript 6    sup_7: str = '\u2077'  # ⁷ superscript 7    sup_8: str = '\u2078'  # ⁸ superscript 8    sup_9: str = '\u2079'  # ⁹ superscript 9    sup_plus: str = '\u207A'  # ⁺ superscript +    sup_minus: str = '\u207B'  # ⁻ superscript –    sup_left_paren: str = '\u207D'  # ⁽ superscript (    sup_right_paren: str = '\u207E'  # ⁾ superscript )    sup_equal: str = '\u207C'  # ⁼ superscript =        # Superscript capital letters    sup_A: str = '\u1d2c'  # ᴬ superscript A    sup_B: str = '\u1d2e'  # ᴮ superscript B    sup_C: str = '\u1d9c'  # ᶜ superscript C    sup_D: str = '\u1d30'  # ᴰ superscript D    sup_E: str = '\u1d31'  # ᴱ superscript E    sup_F: str = '\u1d32'  # ᴲ superscript F    sup_G: str = '\u1d33'  # ᴳ superscript G    sup_H: str = '\u1d34'  # ᴴ superscript H    sup_I: str = '\u1d35'  # ᴵ superscript I    sup_J: str = '\u1d36'  # ᴶ superscript J    sup_K: str = '\u1d37'  # ᴷ superscript K    sup_L: str = '\u1d38'  # ᴸ superscript L    sup_M: str = '\u1d39'  # ᴹ superscript M    sup_N: str = '\u1d3a'  # ᴺ superscript N    sup_O: str = '\u1d3c'  # ᴼ superscript O    sup_P: str = '\u1d3e'  # ᴾ superscript P    sup_Q: str = '\u1d3f'  # ᵠ superscript Q    sup_R: str = '\u1d40'  # ᴿ superscript R    sup_S: str = '\u1d41'  # ᵀ superscript S    sup_T: str = '\u1d42'  # ᵁ superscript T    sup_U: str = '\u1d43'  # ᵁ superscript U    sup_V: str = '\u1d47'  # ᵛ superscript V    sup_W: str = '\u1d48'  # ʷ superscript W    sup_X: str = '\u1d49'  # ˣ superscript X    sup_Y: str = '\u1d4a'  # ʸ superscript Y    sup_Z: str = '\u1d4b'  # ᶻ superscript Z        # Superscript lowercase letters    sup_a: str = '\u1d43'  # ᵃ superscript a    sup_b: str = '\u1d47'  # ᵇ superscript b    sup_c: str = '\u1d9c'  # ᶜ superscript c    sup_d: str = '\u1d48'  # ᵈ superscript d    sup_e: str = '\u1d49'  # ᵉ superscript e    sup_f: str = '\u1da0'  # ᶠ superscript f    sup_g: str = '\u1d4d'  # ᵍ superscript g    sup_h: str = '\u02b0'  # ʰ superscript h    sup_i: str = '\u2071'  # ⁱ superscript i    sup_j: str = '\u02b2'  # ʲ superscript j    sup_k: str = '\u1d4f'  # ᶿ superscript k    sup_l: str = '\u02e1'  # ˡ superscript l    sup_m: str = '\u1d50'  # ᵐ superscript m    sup_n: str = '\u207f'  # ⁿ superscript n    sup_o: str = '\u1d52'  # ᵒ superscript o    sup_p: str = '\u1d56'  # ᵖ superscript p    sup_q: str = '\u1d4a'  # ᶽ superscript q    sup_r: str = '\u02b3'  # ʳ superscript r    sup_s: str = '\u02e2'  # ˢ superscript s    sup_t: str = '\u1d57'  # ᵗ superscript t    sup_u: str = '\u1d58'  # ᵘ superscript u    sup_v: str = '\u1d5b'  # ᵛ superscript v    sup_w: str = '\u02b7'  # ʷ superscript w    sup_x: str = '\u02e3'  # ˣ superscript x    sup_y: str = '\u02b8'  # ʸ superscript y    sup_z: str = '\u1d4b'  # ᶻ superscript z​⬤@dataclassclass greekSymbols:    # Greek capital letters    Alpha: str = '\u0391'  # Α    Beta: str = '\u0392'  # Β    Gamma: str = '\u0393'  # Γ    Delta: str = '\u0394'  # Δ    Epsilon: str = '\u0395'  # Ε    Zeta: str = '\u0396'  # Ζ    Eta: str = '\u0397'  # Η    Theta: str = '\u0398'  # Θ    Iota: str = '\u0399'  # Ι    Kappa: str = '\u039A'  # Κ    Lambda: str = '\u039B'  # Λ    Mu: str = '\u039C'  # Μ    Nu: str = '\u039D'  # Ν    Xi: str = '\u039E'  # Ξ    Omicron: str = '\u039F'  # Ο    Pi: str = '\u03A0'  # Π    Rho: str = '\u03A1'  # Ρ    Sigma: str = '\u03A3'  # Σ    Tau: str = '\u03A4'  # Τ    Upsilon: str = '\u03A5'  # Υ    Phi: str = '\u03A6'  # Φ    Chi: str = '\u03A7'  # Χ    Psi: str = '\u03A8'  # Ψ    Omega: str = '\u03A9'  # Ω        # Greek lowercase letters    alpha: str = '\u03B1'  # α    beta: str = '\u03B2'  # β    gamma: str = '\u03B3'  # γ    delta: str = '\u03B4'  # δ    epsilon: str = '\u03B5'  # ε    zeta: str = '\u03B6'  # ζ    eta: str = '\u03B7'  # η    theta: str = '\u03B8'  # θ    iota: str = '\u03B9'  # ι    kappa: str = '\u03BA'  # κ    lambda_: str = '\u03BB'  # λ underscore at the end is to avoid conflict with the python lambda keyword    mu: str = '\u03BC'  # μ    nu: str = '\u03BD'  # ν    xi: str = '\u03BE'  # ξ    omicron: str = '\u03BF'  # ο    pi: str = '\u03C0'  # π    rho: str = '\u03C1'  # ρ    sigma: str = '\u03C3'  # σ    tau: str = '\u03C4'  # τ    upsilon: str = '\u03C5'  # υ    phi: str = '\u03C6'  # φ    chi: str = '\u03C7'  # χ    psi: str = '\u03C8'  # ψ    omega: str = '\u03C9'  # ω@dataclassclass scriptSymbols:    # Script capital letters    A: str = '\u1d49c'  # 𝒜    B: str = '\u212c'   # ℬ    C: str = '\u1d49e'  # 𝒞    D: str = '\u1d49f'  # 𝒟    E: str = '\u2130'   # ℰ    F: str = '\u2131'   # ℱ    G: str = '\u1d4a2'  # 𝒢    H: str = '\u210b'   # ℋ    I: str = '\u2110'   # ℐ    J: str = '\u1d4a5'  # 𝒥    K: str = '\u1d4a6'  # 𝒦    L: str = '\u2112'   # ℒ    M: str = '\u2133'   # ℳ    N: str = '\u1d4a9'  # 𝒩    O: str = '\u1d4aa'  # 𝒪    P: str = '\u1d4ab'  # 𝒫    Q: str = '\u1d4ac'  # 𝒬    R: str = '\u211b'   # ℛ    S: str = '\u1d4ae'  # 𝒮    T: str = '\u1d4af'  # 𝒯    U: str = '\u1d4b0'  # 𝒰    V: str = '\u1d4b1'  # 𝒱    W: str = '\u1d4b2'  # 𝒲    X: str = '\u1d4b3'  # 𝒳    Y: str = '\u1d4b4'  # 𝒴    Z: str = '\u1d4b5'  # 𝒵    # Script lowercase letters    a: str = '\u1d4b6'  # 𝒶    b: str = '\u1d4b7'  # 𝒷    c: str = '\u1d4b8'  # 𝒸    d: str = '\u1d4b9'  # 𝒹    e: str = '\u212f'   # ℯ    f: str = '\u1d4bb'  # 𝒻    g: str = '\u210a'   # ℊ    h: str = '\u1d4bd'  # 𝒽    i: str = '\u1d4f2'  # 𝒾    j: str = '\u1d4bf'  # 𝒿    k: str = '\u1d4c0'  # 𝓀    l: str = '\u1d4c1'  # 𝓁    m: str = '\u1d4c2'  # 𝓂    n: str = '\u1d4c3'  # 𝓃    o: str = '\u2134'   # ℴ    p: str = '\u1d4c5'  # 𝓅    q: str = '\u1d4c6'  # 𝓆    r: str = '\u1d4c7'  # 𝓇    s: str = '\u1d4c8'  # 𝓈    t: str = '\u1d4c9'  # 𝓉    u: str = '\u1d4ca'  # 𝓊    v: str = '\u1d4cb'  # 𝓋    w: str = '\u1d4cc'  # 𝓌    x: str = '\u1d4cd'  # 𝓍    y: str = '\u1d4ce'  # 𝓎    z: str = '\u1d4cf'  # 𝓏    @dataclassclass typographySymbols:    # Dashes and hyphens    em_dash: str = '\u2014'  # — em dash    en_dash: str = '\u2013'  # – en dash    figure_dash: str = '\u2012'  # ‒ figure dash    hyphen: str = '\u002D'  # - hyphen        # Ellipsis    ellipsis: str = '\u2026'  # … ellipsis    # Symbols    copyright_: str = '\u00A9'  # © copyright symbol use underscore to avoid interferance    registered: str = '\u00AE'  # ® registered trademark symbol    trademark: str = '\u2122'  # ™ trademark symbol    section: str = '\u00A7'  # § section symbol    paragraph: str = '\u00B6'  # ¶ pilcrow (paragraph symbol)        # Bullet and list markers    bullet: str = '\u2022'  # • bullet    middle_dot: str = '\u00B7'  # · middle dot    degree: str = '\u00B0'  # ° degree symbol    # Miscellaneous symbols    dagger: str = '\u2020'  # † dagger    double_dagger: str = '\u2021'  # ‡ double dagger    prime: str = '\u2032'  # ′ prime    double_prime: str = '\u2033'  # ″ double prime    permille: str = '\u2030'  # ‰ per mille    plus_minus: str = '\u00B1'  # ± plus/minus symbol        