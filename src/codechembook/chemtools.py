################################################################################# ChemSymbols - a function containing the unicode strings for special characters# that are common in chemistry################################################################################def chemSymbols(key, printall=False):    """    Function interface to a database of common chemistry symbols.        Required Args:        key (string): which symbol to return (see below for )            Optional Args:        printall (boolean): test function to print all key : symbol pairs            Returns:        (string): the symbol(s) requested by key        Available keys are:    'Angstrom', 'cm-1', 'degree', 'Delta', 'mu', 'nu',     'rxn_arrow_right', 'rxn_arrow_left', 'equil_arrow', 'resonance_arrow'    '_0', '_1', '_2', '_3', '_4', '_5', '_6', '_7', '_8', '_9',     '_+', '_-', '_(', '_)', '_n', '_x', '_i',    '^0', '^1', '^2', '^3', '^4', '^5', '^6', '^7', '^8', '^9',     '^+', '^-', '^(', '^)', '^n', '^x'    """        # Define our dictionary    symbol_dictionary = {        # Chemistry symbols        'Angstrom': '\u212B',        'cm-1': 'cm\u207B\u00B9',        'degree': '\u00B0',        'sbond': '\uFF0D', # single bond        'dbond': '\uFF1D', # double bond        'tbond': '\u200A\u2261\u200A', # triple bond        'rxn_arrow_right': '\u2192',        'rxn_arrow_left': '\u2190',        'equil_arrow': '\u21CC',        'resonance_arrow': '\u2194',        'end_complex': '\u231D', # corner bracket to denote charge of complexes        'radical': '\u02D9', # radical symbol        'dagger': '\u2020', # dagger        'ddagger': '\u2021', # double dagger        # Math symbols        'pm': '\u00B1', # plus/minus        'cdot': '\u22C5', # dot product operator        'mdot': '\u00B7', # middle dot        'identicalto': '\u2261', #         'prime': '\u2032', # prime        'dprime': '\u2033', # double prime        'tprime': '\u2034', # triple prime        'qprime': '\u2057', # quadruple prime        'times': '\u00D9', # times        'divide': '\u00F7', # divide        'infinity': '\u221E', # infinity        'propto': '\u221D', # proportional        'approx': '\u2245', # approximately equal        'ge': '\u2265', # greater than or equal to        'le': '\u2264', # less than or equal to        'gt': '\u003E', # greater than        'lt': '\u003C', # less than        'perpto': '\u27C2', # perpendicular to        # Subscripts and superscripts        '_0': '\u2080', # subscript 0        '_1': '\u2081', # subscript 1        '_2': '\u2082', # subscript 2        '_3': '\u2083', # subscript 3        '_4': '\u2084', # subscript 4        '_5': '\u2085', # subscript 5        '_6': '\u2086', # subscript 6        '_7': '\u2087', # subscript 7        '_8': '\u2088', # subscript 8        '_9': '\u2089', # subscript 9        '_+': '\u208A', # subscript +        '_-': '\u208B', # subscript -        '_(': '\u208D', # subscript (        '_)': '\u208E', # subscript )        '_=': '\u208C', # subscript =        '_A': '\u0041', '_B': '\u0042', '_C': '\u0043', '_D': '\u0044', '_E': '\u0045',        '_F': '\u0046', '_G': '\u0047', '_H': '\u0048', '_I': '\u0049', '_J': '\u004a',        '_K': '\u004b', '_L': '\u004c', '_M': '\u004d', '_N': '\u004e', '_O': '\u004f',        '_P': '\u0050', '_Q': '\u0051', '_R': '\u0052', '_S': '\u0053', '_T': '\u0054',        '_U': '\u0055', '_V': '\u0056', '_W': '\u0057', '_X': '\u0058', '_Y': '\u0059',        '_Z': '\u005a', # subscript capital letters        '_a': '\u0061', '_b': '\u0062', '_c': '\u0063', '_d': '\u0064', '_e': '\u0065',         '_f': '\u0066', '_g': '\u0067', '_h': '\u0068', '_i': '\u0069', '_j': '\u006a',         '_k': '\u006b', '_l': '\u006c', '_m': '\u006d', '_n': '\u006e', '_o': '\u006f',         '_p': '\u0070', '_q': '\u0071', '_r': '\u0072', '_s': '\u0073', '_t': '\u0074',         '_u': '\u0075', '_v': '\u0076', '_w': '\u0077', '_x': '\u0078', '_y': '\u0079',         '_z': '\u007a', # subscript lower case letters        '^0': '\u2070', # superscript 0        '^1': '\u00B9', # superscript 1        '^2': '\u00B2', # superscript 2        '^3': '\u00B3', # superscript 3        '^4': '\u2074', # superscript 4        '^5': '\u2075', # superscript 5        '^6': '\u2076', # superscript 6        '^7': '\u2077', # superscript 7        '^8': '\u2078', # superscript 8        '^9': '\u2079', # superscript 9        '^+': '\u207A', # superscript +        '^-': '\u207B', # superscript â€“        '^(': '\u207D', # superscript (        '^)': '\u207E', # superscript )        '^=': '\u207C', # superscript =        '_A': '\u1d2c', '_B': '\u1d2e', '_C': '\u1d9c', '_D': '\u1d30', '_E': '\u1d31',        '_F': '\u1d32', '_G': '\u1d33', '_H': '\u1d34', '_I': '\u1d35', '_J': '\u1d36',        '_K': '\u1d37', '_L': '\u1d38', '_M': '\u1d39', '_N': '\u1d3a', '_O': '\u1d3c',        '_P': '\u1d3e', '_Q': '\u1d3f', '_R': '\u1d40', '_S': '\u1d41', '_T': '\u1d42',        '_U': '\u1d43', '_V': '\u1d47', '_W': '\u1d48', '_X': '\u1d49', '_Y': '\u1d4a',        '_Z': '\u1d4b', # subscript capital letters        '_a': '\u1d43', '_b': '\u1d47', '_c': '\u1d9c', '_d': '\u1d48', '_e': '\u1d49',        '_f': '\u1da0', '_g': '\u1d4d', '_h': '\u02b0', '_i': '\u2071', '_j': '\u02b2',        '_k': '\u1d4f', '_l': '\u02e1', '_m': '\u1d50', '_n': '\u207f', '_o': '\u1d52',        '_p': '\u1d56', '_q': '\u1d4a', '_r': '\u02b3', '_s': '\u02e2', '_t': '\u1d57',        '_u': '\u1d58', '_v': '\u1d5b', '_w': '\u02b7', '_x': '\u02e3', '_y': '\u02b8',        '_z': '\u1dbb', # subscript lower case letters        # Greek        'Alpha': '\u0391', 'Beta': '\u0392', 'Gamma': '\u0393', 'Delta': '\u0394', 'Epsilon': '\u0395',        'Zeta': '\u0396', 'Eta': '\u0397', 'Theta': '\u0398', 'Iota': '\u0399', 'Kappa': '\u039a',        'Lambda': '\u039b', 'Mu': '\u039c', 'Nu': '\u039d', 'Xi': '\u039e', 'Omicron': '\u039f',        'Pi': '\u03a0', 'Rho': '\u03a1', 'Sigma': '\u03a3', 'Tau': '\u03a4', 'Upsilon': '\u03a5',        'Phi': '\u03a6', 'Chi': '\u03a7', 'Psi': '\u03a8', 'Omega': '\u03a9', # capital greek letters        'alpha': '\u03b1', 'beta': '\u03b2', 'gamma': '\u03b3', 'delta': '\u03b4', 'epsilon': '\u03b5',        'zeta': '\u03b6', 'eta': '\u03b7', 'theta': '\u03b8', 'iota': '\u03b9', 'kappa': '\u03ba',        'lambda': '\u03bb', 'mu': '\u03bc', 'nu': '\u03bd', 'xi': '\u03be', 'omicron': '\u03bf',        'pi': '\u03c0', 'rho': '\u03c1', 'sigma': '\u03c3', 'tau': '\u03c4', 'upsilon': '\u03c5',        'phi': '\u03c6', 'chi': '\u03c7', 'psi': '\u03c8', 'omega': '\u03c9', # lower case greek letters                # Script letters        'scriptA': '\u1d49c', 'scriptB': '\u212c', 'scriptC': '\u1d49e', 'scriptD': '\u1d49f', 'scriptE': '\u2130',        'scriptF': '\u2131', 'scriptG': '\u1d4a2', 'scriptH': '\u210b', 'scriptI': '\u2110', 'scriptJ': '\u1d4a5',        'scriptK': '\u1d4a6', 'scriptL': '\u2112', 'scriptM': '\u2133', 'scriptN': '\u1d4a9', 'scriptO': '\u1d4aa',        'scriptP': '\u1d4ab', 'scriptQ': '\u1d4ac', 'scriptR': '\u211b', 'scriptS': '\u1d4ae', 'scriptT': '\u1d4af',        'scriptU': '\u1d4b0', 'scriptV': '\u1d4b1', 'scriptW': '\u1d4b2', 'scriptX': '\u1d4b3', 'scriptY': '\u1d4b4',        'scriptZ': '\u1d4b5', # capital        'scripta': '\u1d4b6', 'scriptb': '\u1d4b7', 'scriptc': '\u1d4b8', 'scriptd': '\u1d4b9', 'scripte': '\u212f',        'scriptf': '\u1d4bb', 'scriptg': '\u210a', 'scripth': '\u1d4bd', 'scripti': '\u1d4be', 'scriptj': '\u1d4bf',        'scriptk': '\u1d4c0', 'scriptl': '\u1d4c1', 'scriptm': '\u1d4c2', 'scriptn': '\u1d4c3', 'scripto': '\u2134',        'scriptp': '\u1d4c5', 'scriptq': '\u1d4c6', 'scriptr': '\u1d4c7', 'scripts': '\u1d4c8', 'scriptt': '\u1d4c9',        'scriptu': '\u1d4ca', 'scriptv': '\u1d4cb', 'scriptw': '\u1d4cc', 'scriptx': '\u1d4cd', 'scripty': '\u1d4ce',        'scriptz': '\u1d4cf', # lower case                # Other symbols        '---': '\u2014', # em dash        '--': '\u2013', # en dash        'fdash': '\u2012', # figure dash        'hyphen': '\u002D', # hyphen        'copyright': '\u00A9', # copyright symbol        }        # Since the dictionary is hidden from the user, give a way to see the keys    if printall:        for test_key in symbol_dictionary.keys():            print(test_key + ' : ' + symbol_dictionary[test_key])    # Output the result if the user has chosen a proper key    if key in symbol_dictionary.keys():        return symbol_dictionary[key]    else:        if printall == False:            print(key + ' is not a known symbol.')